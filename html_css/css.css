/* css = cascading style sheets 

    css inline, adicionar a propriedade css na própria tag, tem que repetir o código pra cada linha:
        <p style="font-size: 16px; text-align: center">

    tag </style> dentro de </head>:
        <style>
            p {text-align: center;}
        </style>

    mais comum é referenciar um arquivo externo style.css na </head>
        <link rel="stylesheet" href="style.css">
*/


/* cores hexadecimais

    alfabeto hexadecimal 0123456789ABCDEF
    #000000, onde 00red 00green 00blue, 0 é ausência de cor e F máximo de cor

    dicionário RGB: 0 ausência e 255 máximo
    rgb(255,255,255), rgb(0,0,100)
*/


/* seletores
    boa prática é seguir a mesma estrutura do html; ordem em que aparecem 

    body            - tag body
    p, h2           - elementos da tag p e da tag h2
    em strong       - apenas elementos da tag strong que estão dentro da tag em
    #id             - id é melhor usado para comportamentos; elementos únicos
    .classe         - classe é melhor usada para estilos; multiplos elementos
    .classe li      - elementos li dentro da classe .classe
    main p          - todas as tags p dentro da main (mesmo dentro de outras tags)
    main > p 	    - atua apenas em elementos nessa estrutura
    img + p 	    - atua nos primeiros paragrafos após uma imagem
    img ~ p 	    - atua em todos parágrafos após uma imagem
    p:not(#id)      - atua em todos os parágrafos, excluindo os que tem o identificador indicado

    :hover	        - quando o mouse estiver por cima do item
    :active	        - quando o mouse estiver ativo, clicado
    :visited        - link visitado
    :required       - formulários
    :first-child :last-child :nth-child(X)	- especificar itens de uma lista sem criar outra classe, (2n) p/ elementos pares
    :first-letter :first-line

    pseudo-elementos
    :after :before  - conteúdo antes ou depois do elemento, ícones ou caractéres; usar content:"";
*/


/* metodologia BEM para nomear classes => Block Element Modifier => bloco__elemento--modificador */


/* recomenda-se importar no html o styles.css e este arquivo importar css complementares através do @import url() no início do arquivo */


/* declaração de variáveis */
:root {
    --cor-principal: pink;
    /* usar no código com   var(--cor-principal) */
}

* {
    color: lightblue; /* cor do conteúdo */
    background: #CCCCCC; /* fundo do elemento */
    background: url("imagem.png"); /* imagem de fundo; por padrão a imagem é repetida até preencher o espaço, usar apenas com imagens "decorativas" */
    background-repeat: no-repeat; /* não repetir background */
    background-size: contain; /* tamanho do background, preenche container */
    background: linear-gradient(45deg, orange 50%, blue 50%); /* cor gradiente no css, pode mexer na inclinação e porcentagem da tela de onde o gradiente começa, radial-gradient para círculo */

    height: 50px; /* altura */
    width: 100%; /* largura; se for px, pode-se definir margin: 0 auto; após para centralizar conteúdo; 100vw para ignorar padding ou border (viewport width)*/
    max-width: 720px; /* importante delimitar o tamanho máximo do elemento p/ ñ crescer sem fim */
    /* calculo no css */
    width: calc(40% - ((26px * 4) / 4));

    box-sizing: border-box; /* ajusta o tamanho do elemento como definitivo, padding e margin passam a ser internas ao elemento em si */
    transition: 0.5s all; /* tempo de transição de algum efeito; tempo e elemento */
    cursor: pointer; /* trocar seta do mouse pela mãozinha clicável */
    transform: scale(1.2) rotate(70deg); /* escalonar e rotacionar elemento */

    opacity: 0.5; /* transparencia do elemento, vai de 0 a 1 */
    color: rgba(0,0,0,0.5); /* transparencia na cor, rgb com a camada alfa */
    box-shadow: 10px 10px 5px 5px black; /* Xpx Ypx BLURpx INTENSpx cor; 	sombra no elemento */
    /* a b c cor, a2 b2 c2 cor2;		mais de uma sombra */
    box-shadow: inset 0 0 30px blue; /* sombra interna */

    overflow: hidden; /* itens que maiores que esse elemento ficam escondidos */
}

.fontes {
    font-size: 20px; /* tamanho da fonte */
    /* em para se referir a fonte base em pixels (2*16px), usa a tag mãe do elemento, mais individual para elementos
    rem é relativo a tag html, com maior nivel hierarquico de todos (root efemeral), pode se adaptar a tipos de browsers diferentes, que podem usar padrões de fontes diferentes */
    font-style: italic; /* estilo da fonte */
    font-family: 'Open Sans', sans-serif; /* nome da família da fonte, fonte alternativa */
    font-weight: bold; /* peso da fonte */
    text-align: center; /* centraliza conteúdo dentro de um bloco */
    text-transform: uppercase; /* transforma conteúdo todo em maiusculo */
    text-decoration: none; /* remove as decorações, sublinhados */
    line-height: 1.5rem; /* altura da linha */
    text-shadow: 2px 2px #ff0000; /* sombra no texto, mesmas propriedades de box-shadow */

    list-style-type: none; /* remover decoração de estilo da lista */
    
    -webkit-text-fill-color: #FFFFFF; /* colorir fonte; se não for definido, usa a propriedade color */
}

.espacamentos {
    /* margin > border > padding => espaçamento externo > borda > espaçamento interno */
    margin: 0 0; /* valor superior-inferior, valor lados */
    border: 10px solid #000000; /* valor-geral, estilo e cor */
    padding: 0 0 0 0; /* superior, direita, inferior, esquerda */
    border-radius: 5px; /* canto arredondado, raio da curva */
}

.comportamentos {
    display: block; /* elemento ocupa uma linha toda */
    display: inline; /* elemento permite outros conteúdos ao lado; não deixa alterar padding e margin */
    display: inline-block; /* interpreta tudo no html, inclusive espaçamento, então para deixar elementos lado a lado, vai ser necessário colar os elementos no código; ver vertical-align: top; */
    display: none; /* não exibe elemento */
}

.posicoes {
    position: static; /* posição natural dos elementos */
    position: relative; /* relativo ao ponto inicial de criação; receber parâmetros de posição como o top: e left: */
    position: absolute; /* posição absoluta em relação a página; recebe top:, left: */
    /* permite que você movimente o elemento de acordo com outro anterior (pai) e que não seja static */
    top: 0px;
    left: 30px;
    /* para que um elemento seja absolute em relação a um elemento pai, este elemento pai deve ter ser relative */

    z-index: 1;	    /* para definir elemento no eixo z, sobreposição */
}

.float {
    float: left; /* elemento fica livre na página, mas ainda marcado (p/ imagem com parágrafos na sequencia), afeta toda estrutura da página */
    clear: left; /* limpa o float para elementos seguintes */
}

#flexbox {
    display: flex; /* elementos dentro de um espaço, podem ser remanejados, se torna um flex container */
    /* display flex dá acesso a "justify-content" e "align-itens" */
    justify-content: space-evenly; /* espaçamento entre elementos no eixo horizontal */
    align-items: center; /* espaçamento entre elementos no eixo vertical, por padrão vem stretch */
    flex-wrap: nowrap; /* não quebra linha quando terminar a tela; wrap; => quebra linha */
    flex-direction: column; /* direção dos elementos; padrão é row */

    /* itens de um flex container são flex itens, e tem acesso a "justify-self" e "align-self" */
    justify-self: center;
    align-self: center;
}

#grid {
    /* grids dividem a tela em proporção, container é a estrutura que serve de base para colunas (col)
    gutter é o espaço entre as colunas, row divide a tela horizontalmente, resetando o padding do container */
    display: grid; /* grid container, também são aplicados "justify-content" e "align-itens" */
    /* por padrão, elementos são aplicados um abaixo do outro */
    justify-content: center; /* neste caso, serve mais como alinhamento horizontal */
    align-items: center; /* mesmo funcionamento, espaçamento no eixo vertical */

    grid-template-columns: 1fr 1fr; /* informa quantas colunas e qual tamanho, unidade de medidas de fração fr */
    grid-template-rows: auto 1fr; /* mesmo funcionamento, auto para se ajustar ao tamanho do elemento */
    grid-template-columns: repeat(3, auto); /* função para repetir o mesmo valor */

    grid-column: span 2; /* elemento vai ocupar duas celulas, mesclar */
    grid-row: 1 / span 2; /* elemento começa na primeira linha e depois dá um span de 2 linhas */
    gap: 8px; /* espaçamento entre elementos, dentro do grid */
    row-gap: 8px; /* espaçamento apenas entre linhas */

    /* para melhor manutenção do código, grid-areas é melhor que grid-row / grid-column */
    grid-template-areas: "titulo titulo titulo" "destaque destaque recentes"; 
    /* nomeia posições no grid, entre aspas fica uma linha, com o que estará em cada coluna, depois dentro dos elementos, chama o nome do espaço que ele vai ocupar */
    grid-area: "titulo"; /* define a área que o elemento vai ocupar, designada no grid container */
}

/* media queries => adaptação para celular */
@media screen and (max-width: 480px) {
    /* sobrescreve código */
    /* por convenção, se utiliza a menor tela de celular com 320px, 480px p/ média de tablet e 1120px média desktop */
    /* tablet 768px até 1024px */
    /* mobile first: construir páginas primeiramente para telas menores, e após adaptar para telas maiores */
}

@media print {
    /* quando for preparar tela para imprimir algo */
    /* ex: esconder todo conteúdo, menos boleto */
}